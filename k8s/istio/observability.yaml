# TradeMaster Broker Auth Service - Istio Observability Configuration
# Comprehensive observability with metrics, tracing, and access logging

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: trademaster-observability
  namespace: istio-system
spec:
  values:
    telemetry:
      v2:
        prometheus:
          configOverride:
            metric_relabeling_configs:
            - source_labels: [__name__]
              regex: 'istio_.*'
              target_label: component
              replacement: 'istio-mesh'
            - source_labels: [source_service_name]
              regex: 'broker-auth-service'
              target_label: service_name
              replacement: 'broker-auth-service'
        enabled: true
        stack_driver:
          enabled: false
  components:
    pilot:
      k8s:
        env:
        - name: PILOT_ENABLE_WORKLOAD_ENTRY_AUTO_REGISTRATION
          value: "true"
        - name: PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY
          value: "true"

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: broker-auth-service-istio
  namespace: trademaster
  labels:
    app: broker-auth-service
spec:
  selector:
    matchLabels:
      app: broker-auth-service
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus
  - port: management
    interval: 30s
    path: /actuator/prometheus
  namespaceSelector:
    matchNames:
    - trademaster

---
# Grafana Dashboard ConfigMap for Service Mesh metrics
apiVersion: v1
kind: ConfigMap
metadata:
  name: broker-auth-istio-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  broker-auth-istio-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "TradeMaster Broker Auth Service - Istio Metrics",
        "tags": ["trademaster", "istio", "broker-auth"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{destination_service_name=\"broker-auth-service\"}[5m])) by (source_app)",
                "legendFormat": "{{source_app}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              }
            ]
          },
          {
            "id": 2,
            "title": "Success Rate",
            "type": "singlestat",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{destination_service_name=\"broker-auth-service\",response_code!~\"5.*\"}[5m])) / sum(rate(istio_requests_total{destination_service_name=\"broker-auth-service\"}[5m]))",
                "legendFormat": "Success Rate"
              }
            ],
            "format": "percentunit"
          },
          {
            "id": 3,
            "title": "Response Time (P99)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket{destination_service_name=\"broker-auth-service\"}[5m])) by (le))",
                "legendFormat": "P99"
              }
            ]
          },
          {
            "id": 4,
            "title": "Istio Proxy CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{container=\"istio-proxy\",pod=~\"broker-auth-service-.*\"}[5m])) by (pod)",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 5,
            "title": "Istio Proxy Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(container_memory_working_set_bytes{container=\"istio-proxy\",pod=~\"broker-auth-service-.*\"}) by (pod)",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 6,
            "title": "Circuit Breaker Status",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(envoy_cluster_upstream_cx_overflow{cluster_name=~\".*broker-auth-service.*\"}) by (cluster_name)",
                "legendFormat": "{{cluster_name}}"
              }
            ]
          },
          {
            "id": 7,
            "title": "External API Calls",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total{source_app=\"broker-auth-service\",destination_service_name=~\".*kite.*|.*upstox.*|.*angel.*\"}[5m])) by (destination_service_name)",
                "legendFormat": "{{destination_service_name}}"
              }
            ]
          },
          {
            "id": 8,
            "title": "mTLS Status",
            "type": "table",
            "targets": [
              {
                "expr": "istio_request_total{source_app=\"broker-auth-service\",connection_security_policy!=\"mutual_tls\"}",
                "format": "table"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# Jaeger configuration for distributed tracing
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: broker-auth-jaeger
  namespace: istio-system
spec:
  strategy: production
  collector:
    maxReplicas: 5
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
  storage:
    type: elasticsearch
    elasticsearch:
      nodeCount: 3
      redundancyPolicy: SingleRedundancy
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: istio
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - jaeger.trademaster.com
    tls:
      - secretName: jaeger-tls
        hosts:
          - jaeger.trademaster.com

---
# Telemetry v2 configuration for enhanced observability
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: broker-auth-enhanced-telemetry
  namespace: trademaster
spec:
  selector:
    matchLabels:
      app: broker-auth-service
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: requests_total
      tagOverrides:
        request_protocol:
          operation: UPSERT
          value: "%PROTOCOL%"
        response_flags:
          operation: UPSERT
          value: "%RESPONSE_FLAGS%"
        connection_security_policy:
          operation: UPSERT
          value: "%CONNECTION_SECURITY_POLICY%"
        source_principal:
          operation: UPSERT
          value: "%SOURCE_PRINCIPAL%"
        destination_principal:
          operation: UPSERT
          value: "%DESTINATION_PRINCIPAL%"
  tracing:
  - providers:
    - name: jaeger
  - customTags:
      user_id:
        header:
          name: x-user-id
          defaultValue: "anonymous"
      broker_type:
        header:
          name: x-broker-type
          defaultValue: "unknown"
      request_id:
        header:
          name: x-request-id
          defaultValue: "no-request-id"
      auth_method:
        header:
          name: x-auth-method
          defaultValue: "unknown"
      client_ip:
        environment:
          name: REMOTE_ADDR
          defaultValue: "unknown"
  accessLogging:
  - providers:
    - name: otel
  - format:
      text: |
        [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
        %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
        %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
        "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
        %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS%
        %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%
        broker_type="%REQ(X-BROKER-TYPE)%" user_id="%REQ(X-USER-ID)%"

---
# Kiali configuration for service mesh visualization
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
data:
  config.yaml: |
    server:
      port: 20001
      web_root: /kiali
    external_services:
      prometheus:
        url: "http://prometheus.monitoring:9090"
      grafana:
        enabled: true
        in_cluster_url: "http://grafana.monitoring:3000"
        url: "https://grafana.trademaster.com"
      jaeger:
        enabled: true
        in_cluster_url: "http://jaeger-query.istio-system:16686"
        url: "https://jaeger.trademaster.com"
    auth:
      strategy: "openid"
      openid:
        client_id: "kiali-client"
        issuer_uri: "https://auth.trademaster.com"
    deployment:
      namespace: "istio-system"
      ingress_enabled: true
    istio_namespace: "istio-system"

---
# Access logging configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-access-log-format
  namespace: istio-system
data:
  custom_access_log_format.json: |
    {
      "timestamp": "%START_TIME%",
      "method": "%REQ(:METHOD)%",
      "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
      "protocol": "%PROTOCOL%",
      "response_code": "%RESPONSE_CODE%",
      "response_flags": "%RESPONSE_FLAGS%",
      "bytes_received": "%BYTES_RECEIVED%",
      "bytes_sent": "%BYTES_SENT%",
      "duration": "%DURATION%",
      "upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
      "x_forwarded_for": "%REQ(X-FORWARDED-FOR)%",
      "user_agent": "%REQ(USER-AGENT)%",
      "request_id": "%REQ(X-REQUEST-ID)%",
      "authority": "%REQ(:AUTHORITY)%",
      "upstream_host": "%UPSTREAM_HOST%",
      "upstream_cluster": "%UPSTREAM_CLUSTER%",
      "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
      "downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
      "downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
      "requested_server_name": "%REQUESTED_SERVER_NAME%",
      "route_name": "%ROUTE_NAME%",
      "broker_type": "%REQ(X-BROKER-TYPE)%",
      "user_id": "%REQ(X-USER-ID)%",
      "auth_method": "%REQ(X-AUTH-METHOD)%",
      "connection_security_policy": "%CONNECTION_SECURITY_POLICY%",
      "source_principal": "%SOURCE_PRINCIPAL%",
      "destination_principal": "%DESTINATION_PRINCIPAL%"
    }

---
# EnvoyFilter for enhanced access logging
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: broker-auth-access-log
  namespace: trademaster
spec:
  workloadSelector:
    labels:
      app: broker-auth-service
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.wasm
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: "access_log_headers"
            root_id: "access_log_headers"
            configuration:
              "@type": type.googleapis.com/google.protobuf.StringValue
              value: |
                {
                  "headers_to_log": [
                    "x-user-id",
                    "x-broker-type", 
                    "x-auth-method",
                    "x-request-id"
                  ]
                }