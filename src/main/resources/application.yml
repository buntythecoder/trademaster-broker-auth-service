server:
  port: 8084

spring:
  application:
    name: broker-auth-service

  # MANDATORY: Consul Config Import (per TradeMaster standards)
  config:
    import: "optional:consul:"

  # Ensure actuator endpoints are handled correctly - disable on main port
  mvc:
    throw-exception-if-no-handler-found: true
  # Disable actuator auto-configuration on main server
  boot:
    admin:
      client:
        enabled: false
      
  # MANDATORY: Consul Service Discovery & Configuration per Golden Specification
  cloud:
    # Consul Integration
    consul:
      host: ${CONSUL_HOST:localhost}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: true
        register: true
        health-check-path: /actuator/health
        health-check-interval: 30s
        health-check-timeout: 10s
        health-check-critical-timeout: 300s
        health-check-url: http://${CONSUL_INSTANCE_HOSTNAME:localhost}:${MANAGEMENT_SERVER_PORT:9084}/actuator/health
        instance-id: ${spring.application.name}:${server.port}:${random.uuid}
        hostname: ${CONSUL_INSTANCE_HOSTNAME:localhost}
        port: ${server.port}
        service-name: ${spring.application.name}
        tags:
          - broker-capabilities=ZERODHA,UPSTOX,ANGEL_ONE,ICICI_DIRECT
          - api-version=v1
          - kong-upstream=broker-auth-service
          - internal-api=/api/internal/v1/broker-auth
          - external-api=/api/v1/broker-auth
        metadata:
          version: ${app.version:1.0.0}
          description: "TradeMaster Broker Authentication Service"
          supported-brokers: "ZERODHA,UPSTOX,ANGEL_ONE,ICICI_DIRECT"
          performance-target: "session-validation-25ms"
      config:
        enabled: true
        prefix: config
        default-context: ${spring.application.name}
        profile-separator: ':'
        data-key: data
        format: YAML
        watch:
          enabled: true
          delay: 10000
    
    # Cloud Config (managed by Consul)
    config:
      enabled: true
    
    # Config refresh capabilities
    refresh:
      enabled: true
      rate: 30s
  
  # MANDATORY: Virtual Threads Configuration per TradeMaster Standards
  threads:
    virtual:
      enabled: true
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/trademaster_broker_auth}
    username: ${DATABASE_USERNAME:trademaster_admin}
    password: ${DATABASE_PASSWORD:trademaster_secure_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50  # Optimized for Virtual Threads
      minimum-idle: 10       # Standards compliant
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      # âœ… PostgreSQL-specific connection properties from working services
      data-source-properties:
        ApplicationName: TradeMaster-Broker-Auth-Service
        prepareThreshold: 3
        preparedStatementCacheQueries: 256
        preparedStatementCacheSizeMiB: 8
        socketTimeout: 10
        connectTimeout: 5
        tcpKeepAlive: true
        defaultRowFetchSize: 100
        autosave: conservative
        binaryTransfer: true
        logUnclosedConnections: true
  
  # JPA Configuration  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        connection:
          handling_mode: delayed_acquisition_and_release_after_transaction  # Virtual Threads optimization
  
  # Flyway Configuration
  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED:true}
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/trademaster_broker_auth}
    user: ${DATABASE_USERNAME:trademaster_admin}
    password: ${DATABASE_PASSWORD:trademaster_secure_pass}
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    schemas: public
    default-schema: public
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 300000  # 5 minutes for session cache
  
  # Security Configuration
  security:
    # oauth2:
    #   resourceserver:
    #     jwt:
    #       issuer-uri: http://localhost:8081/api/v1/auth
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: broker-auth-service
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      max-poll-records: 500
      fetch-min-size: 1
      properties:
        spring.json.trusted.packages: "com.trademaster.brokerauth.events"

# OpenAPI Documentation
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    display-request-duration: true
    show-extensions: true
    show-common-extensions: true
    default-models-expand-depth: 3
    default-model-expand-depth: 3
  packages-to-scan: com.trademaster.brokerauth.controller
  show-actuator: false

# Broker Configuration
broker:
  # Supported Brokers Configuration
  zerodha:
    name: "Zerodha Kite"
    api-url: "https://api.kite.trade"
    login-url: "https://kite.zerodha.com/connect/login"
    app-id: ${ZERODHA_APP_ID:}
    api-secret: ${ZERODHA_API_SECRET:}
    request-token-url: "https://kite.zerodha.com/connect/login"
    access-token-url: "https://api.kite.trade/session/token"
    rate-limits:
      per-second: 10
      per-minute: 3000
      per-day: 200000
    session-validity: 86400  # 24 hours in seconds
    
  upstox:
    name: "Upstox Pro"
    api-url: "https://api.upstox.com/v2"
    login-url: "https://api.upstox.com/v2/login/authorization/dialog"
    client-id: ${UPSTOX_CLIENT_ID:}
    client-secret: ${UPSTOX_CLIENT_SECRET:}
    redirect-uri: ${UPSTOX_REDIRECT_URI:http://localhost:8084/api/v1/auth/upstox/callback}
    rate-limits:
      per-second: 25
      per-minute: 250
      per-day: 25000
    session-validity: 86400  # 24 hours in seconds
    
  angel-one:
    name: "Angel One SmartAPI"
    api-url: "https://apiconnect.angelbroking.com"
    client-code: ${ANGEL_CLIENT_CODE:}
    password: ${ANGEL_PASSWORD:}
    api-key: ${ANGEL_API_KEY:}
    totp-secret: ${ANGEL_TOTP_SECRET:}
    rate-limits:
      per-second: 25
      per-minute: 200
      per-day: 100000
    session-validity: 43200  # 12 hours in seconds
    
  icici:
    name: "ICICI Direct Breeze"
    api-url: "https://api.icicidirect.com/breezeapi"
    login-url: "https://api.icicidirect.com/apiuser/login"
    app-key: ${ICICI_APP_KEY:}
    secret-key: ${ICICI_SECRET_KEY:}
    redirect-uri: ${ICICI_REDIRECT_URI:http://localhost:8084/api/v1/auth/icici/callback}
    rate-limits:
      per-second: 2      # Conservative limit based on 100/minute
      per-minute: 100    # Official limit per documentation
      per-day: 5000      # Official limit per documentation
    session-validity: 86400  # 24 hours in seconds (session token expiry)
    checksum-timeout: 300    # 5 minutes for checksum validation

  # Common Configuration
  encryption:
    algorithm: "AES/GCM/NoPadding"
    key-size: 256
    master-key: ${BROKER_ENCRYPTION_KEY:}
    
  session:
    cleanup-interval: 3600  # 1 hour in seconds
    max-concurrent-sessions: 5
    token-refresh-threshold: 300  # 5 minutes before expiry

# Rate Limiting Configuration
rate-limiting:
  broker-api:
    capacity: 100
    tokens: 20
    refill-period: 60
  
  auth-endpoints:
    capacity: 20
    tokens: 5
    refill-period: 60

# MANDATORY: Enhanced Monitoring Configuration per TradeMaster Standards
management:
  server:
    port: ${MANAGEMENT_SERVER_PORT:9084}  # Separate port for management endpoints
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,threaddump,heapdump,configprops,refresh,beans,readiness,liveness
      base-path: /actuator
      path-mapping:
        health: health
        info: info
        readiness: ready
        liveness: alive
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      enabled: true
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,db,redis
        liveness:
          include: livenessState,diskSpace,ping
    metrics:
      enabled: true
    prometheus:
      enabled: true
    refresh:
      enabled: true
    configprops:
      enabled: true
      show-values: always
  health:
    config:
      enabled: true
    refresh:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
        descriptions: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        broker.auth.duration: 0.5, 0.95, 0.99
        broker.api.calls.duration: 0.5, 0.95, 0.99
        session.management.duration: 0.5, 0.95, 0.99
        config.refresh.duration: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms
        broker.auth.duration: 100ms,500ms,1s,3s
        broker.api.calls.duration: 100ms,500ms,1s,5s
        config.refresh.duration: 100ms,500ms,1s,2s
      percentiles-histogram:
        http.server.requests: true
        broker.auth.duration: true
    tags:
      application: trademaster
      service: broker-auth-service
      environment: ${spring.profiles.active:local}
      config-server: ${CONFIG_SERVER_URL:localhost:8888}
      version: ${info.app.version:1.0.0}
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}

# TradeMaster specific configuration
trademaster:
  # Performance Monitoring & SLA Configuration
  performance:
    sla:
      critical.ms: 25      # Critical broker auth: â‰¤25ms SLA
      high.ms: 50          # High priority auth: â‰¤50ms SLA
      standard.ms: 100     # Standard auth: â‰¤100ms SLA
      background.ms: 500   # Background auth: â‰¤500ms SLA
      session.ms: 25       # Session validation: â‰¤25ms for cached sessions
      database.ms: 10      # Database operations: â‰¤10ms per operation
    monitoring:
      enabled: true
      report-interval: 60s # SLA compliance reporting interval
      alert-threshold: 95  # Alert when SLA compliance drops below 95%

  # Service URLs for Internal Communication
  services:
    trading-service:
      url: ${TRADING_SERVICE_URL:http://trading-service:8083}
    event-bus-service:
      url: ${EVENT_BUS_SERVICE_URL:http://event-bus-service:8081}
    notification-service:
      url: ${NOTIFICATION_SERVICE_URL:http://notification-service:8084}
    portfolio-service:
      url: ${PORTFOLIO_SERVICE_URL:http://portfolio-service:8086}
    audit-service:
      url: ${AUDIT_SERVICE_URL:http://audit-service:8087}

  security:
    encryption:
      key: ${ENCRYPTION_KEY:default-key-change-in-production-this-should-be-32-bytes}
    cors:
      allowed-origins: ${CORS_ORIGINS:http://localhost:3000}
    cache:
      ttl: 900s  # 15 minutes session cache TTL
    service:
      api-key: ${SERVICE_API_KEY:trademaster-broker-auth-api-key-2024-secure}
      enabled: ${SERVICE_AUTH_ENABLED:true}

    # JWT Configuration for Golden Specification Compliance
    jwt:
      secret: ${JWT_SECRET_KEY:trademaster-jwt-secret-key-2024-change-in-production-256-bits}
      enabled: ${JWT_AUTH_ENABLED:true}
      issuer: "trademaster-broker-auth-service"
      audience: "trademaster-api"
      expiration: ${JWT_EXPIRATION_HOURS:1}  # 1 hour default
    
    # Kong API Gateway Integration per Golden Specification
    kong:
      # Kong Consumer Headers for Internal API Authentication
      headers:
        consumer-id: X-Consumer-ID
        consumer-username: X-Consumer-Username 
        consumer-custom-id: X-Consumer-Custom-ID
        api-key: X-API-Key
      
      # Service API Key Configuration
      service-keys:
        trading-service: ${TRADING_SERVICE_API_KEY:}
        portfolio-service: ${PORTFOLIO_SERVICE_API_KEY:}
        risk-service: ${RISK_SERVICE_API_KEY:}
        notification-service: ${NOTIFICATION_SERVICE_API_KEY:}
        monitoring-service: ${MONITORING_SERVICE_API_KEY:}
        config-service: ${CONFIG_SERVICE_API_KEY:}
      
      # Kong Service Configuration for Registration
      upstream:
        name: broker-auth-service
        url: http://localhost:${server.port}
        health-check-url: /actuator/health
        routes:
          external:
            path: /api/v1/broker-auth
            methods: [GET, POST, PUT, DELETE]
            strip-path: false
          internal:
            path: /api/internal/v1/broker-auth  
            methods: [GET, POST, PUT, DELETE]
            strip-path: false
  
  # HTTP Client Configuration
  http:
    connection-pool:
      max-total: 75          # Auth service optimized - max total connections
      max-per-route: 35      # Max connections per route for auth operations
      validate-after-inactivity: 2000  # Connection validation interval (ms)
    timeout:
      connection: 5000       # Connection timeout for auth operations (ms)
      socket: 10000          # Socket timeout for broker API calls (ms)
      request: 8000          # Request timeout for internal calls (ms)
    keep-alive:
      duration: 30000        # Keep-alive duration (ms)
  
  # Service identification for internal communication
  service:
    name: broker-auth-service

# Application Configuration
app:
  version: "1.0.0"
  
  # Kafka Topics Configuration
  kafka:
    topics:
      broker-auth-events: broker-auth-events
      session-events: session-events
      rate-limit-events: rate-limit-events
      
  # Scheduler Configuration
  scheduler:
    session-cleanup:
      enabled: true
    token-refresh:
      enabled: true
    rate-limit-cleanup:
      enabled: true
      
  # Circuit Breaker Configuration
  circuit-breaker:
    failure-rate-threshold: 50
    slow-call-rate-threshold: 50
    slow-call-duration-threshold: 2000
    minimum-number-of-calls: 10
    sliding-window-size: 20
    wait-duration-in-open-state: 30000
    
  # Security Configuration
  security:
    cors:
      allowed-origins: 
        - "http://localhost:3000"
        - "http://localhost:8080"
        - "https://trademaster.app"
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers:
        - "*"
      allow-credentials: true
      max-age: 3600

# Logging Configuration
logging:
  level:
    com.trademaster.brokerauth: DEBUG
    org.springframework.security: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    io.github.resilience4j: INFO
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      zerodha-api:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2000ms
        minimum-number-of-calls: 10
        sliding-window-size: 20
        wait-duration-in-open-state: 30s
      upstox-api:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2000ms
        minimum-number-of-calls: 10
        sliding-window-size: 20
        wait-duration-in-open-state: 30s
      angel-one-api:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 3000ms
        minimum-number-of-calls: 10
        sliding-window-size: 20
        wait-duration-in-open-state: 45s
      icici-api:
        failure-rate-threshold: 60
        slow-call-rate-threshold: 60
        slow-call-duration-threshold: 2500ms
        minimum-number-of-calls: 8
        sliding-window-size: 15
        wait-duration-in-open-state: 30s
  
  ratelimiter:
    instances:
      zerodha-api:
        limit-for-period: 10
        limit-refresh-period: 1s
        timeout-duration: 5s
      upstox-api:
        limit-for-period: 25
        limit-refresh-period: 1s
        timeout-duration: 5s
      angel-one-api:
        limit-for-period: 20
        limit-refresh-period: 1s
        timeout-duration: 5s
      icici-api:
        limit-for-period: 2
        limit-refresh-period: 1s
        timeout-duration: 3s
        
  retry:
    instances:
      broker-auth:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2

# ===== HTTP CLIENT CONFIGURATION =====
# Connection pooling configuration for broker auth service merged with main trademaster section

---
# Docker Profile - Override database configuration for Docker environment
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/trademaster_broker_auth
    username: trademaster_admin
    password: trademaster_secure_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50  # Optimized for Virtual Threads
      minimum-idle: 10       # Standards compliant
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      # âœ… PostgreSQL-specific connection properties from working services + debug
      data-source-properties:
        ApplicationName: TradeMaster-Broker-Auth-Service
        prepareThreshold: 3
        preparedStatementCacheQueries: 256
        preparedStatementCacheSizeMiB: 8
        socketTimeout: 10
        connectTimeout: 5
        tcpKeepAlive: true
        defaultRowFetchSize: 100
        autosave: conservative
        binaryTransfer: true
        logUnclosedConnections: true
        loggerLevel: TRACE
  # JPA Configuration for Docker - Use create pattern like trading-service
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        connection:
          handling_mode: delayed_acquisition_and_release_after_transaction  # Virtual Threads optimization
          
  data:
    redis:
      host: redis
      
  # Enhanced logging for SCRAM debugging
  logging:
    level:
      com.zaxxer.hikari: DEBUG
      org.springframework.boot.autoconfigure.jdbc: DEBUG
      org.springframework.jdbc.datasource: DEBUG
      org.flywaydb: DEBUG
      org.postgresql: DEBUG
      org.hibernate.engine.jdbc.connections: DEBUG
      org.springframework.boot.autoconfigure.flyway: DEBUG
      
  flyway:
    enabled: false
    url: jdbc:postgresql://postgres:5432/trademaster_broker_auth
    user: trademaster_admin
    password: trademaster_secure_pass