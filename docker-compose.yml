# TradeMaster Broker Auth Service - Docker Compose
# Complete development and testing environment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: trademaster-postgres
    environment:
      POSTGRES_DB: trademaster
      POSTGRES_USER: trademaster
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_prod}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademaster -d trademaster"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Broker Auth Service
  broker-auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trademaster-broker-auth
    ports:
      - "8087:8087"
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/trademaster
      SPRING_DATASOURCE_USERNAME: trademaster
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_prod}
      
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Encryption Configuration
      BROKER_AUTH_ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev_key_change_in_production_32_chars}
      
      # Broker API Configuration
      BROKER_ZERODHA_API_URL: ${ZERODHA_API_URL:-https://api.kite.trade}
      BROKER_ZERODHA_LOGIN_URL: ${ZERODHA_LOGIN_URL:-https://kite.trade/connect/login}
      BROKER_UPSTOX_API_URL: ${UPSTOX_API_URL:-https://api.upstox.com/v2}
      BROKER_UPSTOX_LOGIN_URL: ${UPSTOX_LOGIN_URL:-https://api.upstox.com/v2/login/authorization/dialog}
      BROKER_ANGEL_ONE_API_URL: ${ANGEL_ONE_API_URL:-https://apiconnect.angelbroking.com}
      BROKER_ICICI_DIRECT_API_URL: ${ICICI_DIRECT_API_URL:-https://api.icicidirect.com}
      
      # Security Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      
      # Monitoring Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,metrics,prometheus,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      
      # Logging Configuration
      LOGGING_LEVEL_COM_TRADEMASTER: ${LOG_LEVEL:-INFO}
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
      
      # Performance Tuning
      SPRING_THREADS_VIRTUAL_ENABLED: true
      JAVA_OPTS: "-Xmx1g -Xms512m --enable-preview"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trademaster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8087/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M
    volumes:
      - ./logs:/app/logs
      - ./tmp:/app/tmp

  # Prometheus (Optional - for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: trademaster-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trademaster-network
    profiles:
      - monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana (Optional - for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: trademaster-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana-datasources:/etc/grafana/provisioning/datasources
    networks:
      - trademaster-network
    profiles:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped

networks:
  trademaster-network:
    driver: bridge
    name: trademaster-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local